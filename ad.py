import disnake
from disnake.ext import commands
from disnake import TextInputStyle

class AdModal(disnake.ui.Modal):
    def __init__(self, ad_type):
        self.ad_type = ad_type
        
        if ad_type == "rp":
            components = [
                disnake.ui.TextInput(
                    label="–°—Å—ã–ª–∫–∞ –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä",
                    placeholder="https://discord.gg/...",
                    custom_id="discord_link",
                    style=TextInputStyle.short,
                    required=True,
                ),
                disnake.ui.TextInput(
                    label="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
                    placeholder="–¢–æ–ø-2 —Å–µ—Ä–≤–µ—Ä –ø–æ JuniperBot-—É",
                    custom_id="description",
                    style=TextInputStyle.paragraph,
                    required=True,
                    max_length=1000,
                ),
                disnake.ui.TextInput(
                    label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É",
                    placeholder="https://...",
                    custom_id="image_url",
                    style=TextInputStyle.short,
                    required=False,
                ),
            ]
            title = "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ü–∏–∞—Ä"
        else:
            components = [
                disnake.ui.TextInput(
                    label="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏",
                    placeholder="–ü–∏—à—É –±–æ—Ç–æ–≤ –¥–∏—Å–∫–æ—Ä–¥ –Ω–∞ Java, –ø—Ä–∏–º–µ—Ä—ã –∏ —Ü–µ–Ω–∞ –≤ –ª—Å",
                    custom_id="service_description",
                    style=TextInputStyle.paragraph,
                    required=True,
                    max_length=1000,
                ),
                disnake.ui.TextInput(
                    label="–û–ø–ª–∞—Ç–∞",
                    placeholder="–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã",
                    custom_id="price",
                    style=TextInputStyle.short,
                    required=True,
                ),
                disnake.ui.TextInput(
                    label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É",
                    placeholder="https://...",
                    custom_id="image_url",
                    style=TextInputStyle.short,
                    required=False,
                ),
            ]
            title = "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –£—Å–ª—É–≥–∏"
            
        super().__init__(title=title, components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        await inter.response.send_message("–°–æ–∑–¥–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...", ephemeral=True)
        
        try:
            if self.ad_type == "rp":
                discord_link = inter.text_values["discord_link"]
                description = inter.text_values["description"]
                image_url = inter.text_values.get("image_url", "")
                
                if not image_url:
                    image_url = "https://i.ibb.co/Q70hP5PF/Untitled-47.png"
                
                embed = disnake.Embed(color=0x2b2d31)
                
                description = description[:1000] if len(description) > 1000 else description
                embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ:", value=f"```{description}```", inline=False)
                
                embed.set_image(url=image_url)
                
                view = RPAdView(inter.author.id)
                
                discord_link = discord_link[:1950] if len(discord_link) > 1950 else discord_link
                await inter.channel.send(
                    content=discord_link,
                    embed=embed,
                    view=view
                )
                
                await inter.delete_original_message()
                
            else: 
                service_description = inter.text_values["service_description"]
                price = inter.text_values["price"]
                image_url = inter.text_values.get("image_url", "")
                
                if not image_url:
                    image_url = "https://i.ibb.co/Q70hP5PF/Untitled-47.png"
                
                embed = disnake.Embed(color=0x2b2d31)
                embed.title = "–ú–æ–∏ —É—Å–ª—É–≥–∏"
                
                service_description = service_description[:1000] if len(service_description) > 1000 else service_description
                embed.add_field(
                    name="üõí –£—Å–ª—É–≥–∞:",
                    value=f"```{service_description}```",
                    inline=False
                )
                
                price = price[:100] if len(price) > 100 else price
                embed.add_field(
                    name="üõí –û–ø–ª–∞—Ç–∞:",
                    value=f"```{price}```",
                    inline=False
                )
                
                embed.set_thumbnail(url=inter.author.display_avatar.url)
                
                embed.set_image(url=image_url)
                
                view = ServiceAdView(inter.author.id)
                
                await inter.channel.send(
                    content=f"{inter.author.mention}",
                    embed=embed,
                    view=view
                )
                
                await inter.delete_original_message()
                
        except disnake.errors.HTTPException as e:
            if "Must be 2000 or fewer in length" in str(e):
                await inter.edit_original_message(content="–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Discord –≤ 2000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            else:
                await inter.edit_original_message(content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

class RPAdView(disnake.ui.View):
    def __init__(self, author_id: int):
        super().__init__(timeout=None)
        self.author_id = author_id
        
        create_btn = disnake.ui.Button(
            style=disnake.ButtonStyle.secondary,
            label="–°–æ–∑–¥–∞—Ç—å –ø–∏–∞—Ä",
            emoji="ü§ù",
            custom_id=f"create_rp_post"
        )
        create_btn.callback = self.create_callback
        self.add_item(create_btn)
        
        delete_btn = disnake.ui.Button(
            style=disnake.ButtonStyle.secondary,
            emoji="üóëÔ∏è",
            custom_id=f"delete_ad_rp_{author_id}"
        )
        delete_btn.callback = self.delete_callback
        self.add_item(delete_btn)
    
    async def create_callback(self, inter: disnake.MessageInteraction):
        modal = AdModal("rp")
        await inter.response.send_modal(modal)
    
    async def delete_callback(self, inter: disnake.MessageInteraction):
        if inter.author.id == self.author_id or inter.channel.permissions_for(inter.author).manage_messages:
            await inter.message.delete()
            await inter.response.send_message("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", ephemeral=True)
        else:
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!", ephemeral=True)

class ServiceAdView(disnake.ui.View):
    def __init__(self, author_id: int):
        super().__init__(timeout=None)
        self.author_id = author_id
        
        dm_btn = disnake.ui.Button(
            style=disnake.ButtonStyle.link,
            label="–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É",
            emoji="‚úâÔ∏è",
            url=f"https://discord.com/users/{author_id}"
        )
        self.add_item(dm_btn)
        
        create_btn = disnake.ui.Button(
            style=disnake.ButtonStyle.secondary,
            label="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç",
            emoji="‚úèÔ∏è",
            custom_id=f"create_service_post"
        )
        create_btn.callback = self.create_post_callback
        self.add_item(create_btn)
        
        delete_btn = disnake.ui.Button(
            style=disnake.ButtonStyle.secondary,
            emoji="üóëÔ∏è",
            custom_id=f"delete_ad_service_{author_id}"
        )
        delete_btn.callback = self.delete_callback
        self.add_item(delete_btn)
    
    async def create_post_callback(self, inter: disnake.MessageInteraction):
        modal = AdModal("services")
        await inter.response.send_modal(modal)
    
    async def delete_callback(self, inter: disnake.MessageInteraction):
        if inter.author.id == self.author_id or inter.channel.permissions_for(inter.author).manage_messages:
            await inter.message.delete()
            await inter.response.send_message("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", ephemeral=True)
        else:
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!", ephemeral=True)

class CreateButton(disnake.ui.Button):
    def __init__(self, ad_type):
        super().__init__(
            style=disnake.ButtonStyle.success,
            label="–°–æ–∑–¥–∞—Ç—å",
            custom_id=f"create_ad_{ad_type}"
        )
        self.ad_type = ad_type

    async def callback(self, inter: disnake.MessageInteraction):
        modal = AdModal(self.ad_type)
        await inter.response.send_modal(modal)

class InitialView(disnake.ui.View):
    def __init__(self, ad_type):
        super().__init__(timeout=300)
        self.add_item(CreateButton(ad_type))

class AdCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        self.bot.add_view(RPAdView(0))
        self.bot.add_view(ServiceAdView(0))

    @commands.slash_command(name="ad", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    @commands.has_permissions(administrator=True)
    async def ad(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @ad.sub_command(name="rp", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–∏–∞—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    async def ad_rp(self, inter: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(
            title="üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ü–∏–∞—Ä",
            description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–∏–∞—Ä–∞ –≤–∞—à–µ–≥–æ Discord —Å–µ—Ä–≤–µ—Ä–∞.",
            color=0x2F3136
        )
        view = InitialView("rp")
        await inter.response.send_message(embed=embed, view=view, ephemeral=True)

    @ad.sub_command(name="services", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± —É—Å–ª—É–≥–∞—Ö")
    async def ad_services(self, inter: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(
            title="üíº –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –£—Å–ª—É–≥–∏",
            description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.",
            color=0x2F3136
        )
        view = InitialView("services")
        await inter.response.send_message(embed=embed, view=view, ephemeral=True)

def setup(bot):
    bot.add_cog(AdCog(bot))
print("""
################################################################################
#                                                                              #
#                                  ######      ######                          #
#                                 #      #    #      #                         #
#                                 #      #    #      #                         #
#                                 #######     #######                          #
#                                 #      #    #      #                         #
#                                 #      #    #      #                         #
#                                 #      #    #######                          #
#                                                                              #
#                               –ê–≤—Ç–æ—Ä: EndermanHack19                          #
#                                                                              #
#    –†–µ—Å—É—Ä—Å—ã:                                                                  #
#    GitHub EndermanHack19:  https://github.com/EndermanHack19                 #
#    GitHub AniLand-company:  https://github.com/AniLand-company               #
#    Discord:                https://discord.gg/Kmpk7sBCVQ                     #
#                                                                              #
################################################################################
""")
